{
  "hash": "a0629d96b94738f795658958137139b4",
  "result": {
    "markdown": "---\ntitle: \"Tidy Selection\"\nauthor: \"Technical Description\"\ndate: \"2023-05-12\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\nformat:\n  revealjs\n---\n\n\n## **Sets of variables**\n\n-   Earlier versions of tidyselect had more of a flavour of set operations, so that you'd write `starts_with(\"a\") - ends_with(\"b\")`\n\n-   Today, the syntax of tidyselect is generally designed around **Boolean algebra**, i.e.we recommend writing `starts_with(\"a\") & !ends_with(\"z\")`.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n# Ways to access the sets of variables\n\n## (a) **Using Bare names**\n\nWithin *data-expressions*, bare names represent their own locations, i.e.Â a set of size 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n:::\n:::\n\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  select_loc(mpg:hp, !cyl, vs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n   1    2    3    4    5    6    7    8    9   10   11 \n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  select_loc(1:4, !2, 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n   1    2    3    4    5    6    7    8    9   10   11 \n```\n:::\n:::\n\n\n\n:::\n\n:::\n\n\n## (b) **Using : operator**     \n\n- selects consecutive variables between two locations. \n- returns the corresponding sequence of locations.\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  select_loc(mpg:hp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n mpg  cyl disp   hp \n   1    2    3    4 \n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  select_loc(1:4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n mpg  cyl disp   hp \n   1    2    3    4 \n```\n:::\n:::\n\n\n\n:::\n\n:::\n\n## (c) **Using boolean operators**     \n\n- union(|), intersection(&), complement(!)\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nSepal.Length  Sepal.Width  Petal.Width \n           1            2            4 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSepal.Width \n          2 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSepal.Length Petal.Length      Species \n           1            3            5 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSepal.Length \n           1 \n```\n:::\n:::\n\n\n\n## (d) **Using ... & c()**     \n\ntidyselect functions can take    \n\n- dots, like dplyr::select(), or \n- a named argument, like tidyr::pivot_longer(). \n\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  select_loc(mpg, disp:hp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n mpg disp   hp \n   1    3    4 \n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  select_loc(c(mpg, disp:hp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n mpg disp   hp \n   1    3    4 \n```\n:::\n:::\n\n\n:::\n\n:::\n\nc(x, y, z) is a equivalent to x | y | z\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% \n  select_loc(starts_with(\"Sepal\"), \n             ends_with(\"Width\"), \n             Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSepal.Length  Sepal.Width  Petal.Width      Species \n           1            2            4            5 \n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% \n  select_loc(starts_with(\"Sepal\") | \n               ends_with(\"Width\") | \n               Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSepal.Length  Sepal.Width  Petal.Width      Species \n           1            2            4            5 \n```\n:::\n:::\n\n\n:::\n\n:::\n\n\n## (e) **by renaming variables**  ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}