{"title":"Functional Programming with Purrr","markdown":{"yaml":{"title":"Functional Programming with Purrr","author":"Priyanka Gagneja","date":"2023-03-25","categories":["R-Programming","examples","til","how-to"],"image":""},"headingText":"| eval: false","containsRefs":false,"markdown":"\n\n```{r}\nlibrary(dplyr)\nlibrary(purrr)\n```\n\nPlace to discuss several use cases where I could use\n\n```{r, ex1}\n \n## Cache SAS outputs (saved in the same location as SAS output files)\npurrr::walk(.x = output_file_names,\n            .f = ~ write_csv_plus(haven::read_sas(paste0(sas_output_path, \"/\", .x, \".sas7bdat\")),\n                                  paste0(sas_output_path, \"/\", .x, \".csv\"))\n            )\n            \n## Cache SAS outputs (saved inside production/tests/testdata/fn/expected_output)\npurrr::walk(.x = output_file_names,\n            .f = ~ write_csv_plus(haven::read_sas(paste0(sas_output_path, \"/\", .x, \".sas7bdat\")),\n                                  paste0(tests_output_path, \"/\", .x, \".csv\"))\n)\n\n```\n\n```{r, ex2}\n\nset.seed(42)\ndf1 <- data.frame(location = rep(c(\"Location A\", \"Location B\", \"Location C\"), 3),\n              value = rnorm(9), extra = \"yes\")\ndf2 <- data.frame(location = rep(c(\"Location A\", \"Location C\", \"Location D\"), 2),\n              value = rnorm(6), var = \"extra var\")\ndf3 <- data.frame(location = rep(c(\"Location B\", \"Location D\", \"Location E\"), 2),\n              number = rnorm(6))\n\ndfs <- list(df1, df2, df3)\n\n# So the spreadsheet would have a tab for location A that would read:\n# Row 1: value 1.37; extra yes; var NA; number NA\n# Row n: value -0.06; extra NA; var extra var; number NA\n# Then similar for Location B...\n# Seems simplish but I'm totally stuck. Any ideas?\n\n\n# ----\ndf_s <- dplyr::bind_rows(df1, df2, df3)\n\nfilter_loc <- function(df, loc_value) {\n    df %>% \n        dplyr::filter(location == paste(\"Location\", loc_value))\n}\n\npurrr::map(.x = c(\"A\", \"B\", \"C\", \"D\", \"E\"), .f = ~ df_s %>% filter_loc(.x))\n\n```\n\n```{r}\n# Before:\n# emoticons_1 <- function(x) {\n#   if (x == \"happy\") {\n#     \":)\"\n#   } else if (x == \"sad\") {\n#     \":(\"\n#   } else {\n#     \"Feeling too complex for emoticons\"\n#   }\n# }\n# emoticons_list <- list(\n#   c(\"happy\", \":)\"),\n#   c(\"sad\", \":(\")\n# )\n# \n# emoticons_2 <- function(x, emoticons_list) {\n#   if (x == emoticons_list[[1]][1]) {\n#     return (emoticons_list[[1]][2])\n#   } else if (x == emoticons_list[[2]][1]) {\n#     return (emoticons_list[[2]][2])\n#   } else {\n#     return (\"Feeling too complex for emoticons\")\n#   }\n# }\n\n# After \ndf <- data.frame(\n  id = c(1:5),\n  mood = c(\"happy\", \"sad\", \"sad\", \"ecstatic\", \"ecstatic\") \n)\n\nemoticons_list <- list(\n  c(\"happy\", \":)\"),\n  c(\"sad\", \":(\"),\n  c(\"ecstatic\", \":D\")\n)\n\nemoticons_df <- data.frame(\n  emotion = c(\"happy\",\"sad\", \"ecstatic\"),\n  emoticon = c(\":)\", \":(\", \":D\")\n)\n\nget_emoticon <- function(df, selected_emotion) {\n  \n  result <- df %>% \n    filter(emotion == selected_emotion) %>% \n    pull(emoticon)\n  \n  return(result)\n}\n\ndf %>% \n  mutate(emoticon = purrr::map(.x = mood, \n                               .f = ~get_emoticon(emoticons_df, .x)\n                              )\n  )\n\ndf %>% \n  left_join(emoticons_df, by = c(\"mood\" = \"emotion\"))\n\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","editor":"visual","theme":"cosmo","title-block-banner":true,"title":"Functional Programming with Purrr","author":"Priyanka Gagneja","date":"2023-03-25","categories":["R-Programming","examples","til","how-to"],"image":""},"extensions":{"book":{"multiFile":true}}}}}