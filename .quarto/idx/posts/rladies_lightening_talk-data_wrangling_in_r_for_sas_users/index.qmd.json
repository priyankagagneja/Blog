{"title":"RLadies Philly & DC Lightning Talk","markdown":{"yaml":{"title":"RLadies Philly & DC Lightning Talk","subtitle":"Data Wrangling In R For SAS users","format":{"rladies-revealjs":{"footer":"[R-Ladies](https://rladies.org/) theme for [Quarto Presentations](https://quarto.org/docs/presentations/revealjs/index.html). Code available on [GitHub](https://github.com/beatrizmilz/quarto-rladies-theme).","code-overflow":"wrap"}},"engine":"knitr","code-block-border-left":true,"highlight-style":"ayu"},"headingText":"Introduction","headingAttr":{"id":"","classes":[],"keyvalue":[["background-color","#562457"]]},"containsRefs":false,"markdown":"\n\n\n**Priyanka Gagneja** ![](images/pg_LL.jpeg){.absolute top=\"10\" right=\"10\" width=\"250\"}\n\n*Senior R Developer at ProCogia*\n\n![](images/procogia-logo-footer.png){.absolute top=\"270\" right=\"10\" width=\"250\" height=\"100\"}\n\n[Say Hi]{.underline}:\n\n-   [Linkedin](https://www.linkedin.com/in/priyanka-gagneja/)\\\n-   [Twitter](https://www.twitter.com/priyankaigit)\n\n[Check Out:]{.underline}\n\n-   [Github](https://github.com/priyankagagneja)\\\n-   [Blog](https://priyanka-gagneja.quarto.pub/learn-r-with-priyanka/)\n\n## Let's Discuss\n\n-   Who\n\n-   Why\n\n-   How\n\n::: notes\nWho: aims to familiarise SAS users with R\n\nWhy: cos R is open source, FREE, has a strong community etc.\n\nHow : rest of the presentation covers a brief synopsis on this.\n:::\n\n## Analytics Pipeline\n\n-   Importing data\n\n-   **Wrangling data**\n\n-   Plotting\n\n-   **Macros vs Functions**\n\n-   Modeling\n\n::: callout-tip\n## Yay!!\n\nSAS users start to feel at ease thinking about doing things in R\n:::\n\n## Importing data\n\n::: columns\n::: {.column width=\"45%\"}\nSAS\n\n-   Operate in 'Work' library by default\n-   Use libname to define file locations\n\n```{sas, eval=FALSE, echo=TRUE}\n#| code-overflow: wrap\nlibname library_name \"file_location\"; \n\ndata data_in_use ;\nset library_name.saved_data ; \nrun;\n\nproc import datafile = \"my_file.csv\" \n            out = my_data dbms = csv;\nrun;\n```\n:::\n\n::: {.column width=\"48%\"}\nR\n\n-   Operate in a given 'working directory'- use **getwd()** )\n-   Use **setwd()** to switch to other locations\n\n```{r, eval=FALSE, echo=TRUE}\n#| code-overflow: wrap\n\nsetwd(\"file_location\")\n\n\nsave(data_in_use , file = \"saved_data.rda\")\n\n\n\n\nwrite.csv()\n```\n:::\n:::\n\n## Wrangling data\n\nWorking with columns - create, (de)select, rename variables\n\n::: columns\n::: {.column width=\"48%\"}\nSAS\n\n```{r, eval=FALSE, echo=TRUE}\n#| code-line-numbers: \"|1,2,3,4|6,7,8,9|11,12,13,14|16,17,18,19,20\"\n# assigning a new data frame - data step\ndata new_data; \nset old_data;\nrun;\n\n# keeping & dropping a column\ndata new_data (keep=id);\nset old_data (drop=job_title) ;\nrun;\n\n# dropping multiple columns\ndata new_data (drop= temp: ); \nset old_data;\nrun;\n\n# renaming a column   \ndata new_data;\nset old_data;\nrename old_name = new_name;\nrun;\n\n```\n:::\n\n::: {.column width=\"45%\"}\nR\n\n```{r, eval=FALSE, echo=TRUE}\n#| code-line-numbers: \"|1,2,3,4|6,7,8,9|11,12,13,14|16,17,18,19,20\"\n# assigning a new data frame\nnew_data <- old_data\n\n\n\n# selecting & deselecting a column\nnew_data <- old_data %>% \n  select(-job_title) %>% \n  select(id)\n\n# selecting a bunch of columns to remove\nnew_data <- old_data %>% \n  select( -starts_with(\"temp\"))\n\n          \n# renaming a column         \n\n\nnew_data <- old_data %>%\n  rename(new_name = old_name)\n\n```\n:::\n:::\n\n## Wrangling data.. contd\n\nWorking with rows - Sorting & Filtering\n\n::: columns\n::: {.column width=\"48%\"}\nSAS\n\n```{r, eval=FALSE, echo=TRUE}\n#| code-line-numbers: \"|1,2,3,4,5, 6,7,8|10,11,12,13,14|16,17,18\"\n# Sorting data\nproc sort data=old_data out=new_data; \nby id descending income ;\nrun;\n\n# Remove duplicates while sorting\nproc sort data=old_data nodup; \nby id job_type;\nrun;\n\n\n# Filtering for rows satisfying certain criteria\ndata new_data;\nset old_data; \nif year = 2020;\nrun;\n\ndata new_data;\nset old_data;\nby id;\ncounter + 1 ;\nif first.id then counter = 1;\nif counter <= 5;\nrun;\n\n```\n:::\n\n::: {.column width=\"45%\"}\nR\n\n```{r, eval=FALSE, echo=TRUE}\n#| code-line-numbers: \"|1,2,3,4,5, 6,7,8\"\n# Arranging data\nnew_data <- old_data %>% \n  arrange(id, desc(income))\n\n\n# Remove duplicates while sorting\nold_data <- old_data %>% \n  arrange(id, job_type) %>% \n  distinct()\n\n\n# Filtering for rows satisfying certain criteria\nnew_data <- old_data %>%\n  filter(year == 2020)\n\n\n\n\n\nnew_data <- old_data %>% \n  group_by(id) %>%\n  mutate(counter = row_number()) %>% \n  filter(counter <=5)\n\n```\n:::\n:::\n\n## Wrangling data.. contd\n\nWorking with aggregates - Summarising, Tabulating\n\n::: columns\n::: {.column width=\"48%\"}\nSAS\n\n```{r, eval=FALSE, echo=TRUE}\n#| code-line-numbers: \"|1,2,3,4,5, 6,7,8|10,11,12,13,14|16,17,18\"\n# Counting across one/multiple columns\nproc freq data = old_data ; \ntable job_type ;\nrun;\n\nproc freq data = old_data ;\ntable job_type*region ; \nrun;\n\n# Summarise data\nproc summary data = old_data nway ; \nclass job_type region ;\noutput out = new_data ;\nrun;\n\nproc summary data = old_data nway ; \nclass job_type region ;\nvar salary ;\n\n```\n:::\n\n::: {.column width=\"45%\"}\nR\n\n```{r, eval=FALSE, echo=TRUE}\n#| code-line-numbers: \"|1,2,3,4,5, 6,7,8|10,11,12,13,14|16,17,18\"\n# Counting across one/multiple columns\nold_data %>%\n  count(job_type) %>% \n  mutate(percent = n*100/sum(n))\n\nold_data %>%\n count(job_type, region)\n\n\n# Summarise data (equi to with nway option)\nnew_data <- old_data %>% \n  group_by(job_type, region) %>% \n  summarise(Count = n())\n\nnew_data <- old_data %>%\n  group_by(job_type, region) %>% \n  summarise(total_salaries = sum(salary) ,\n            Count          = n() )\n\n```\n:::\n:::\n\n## Wrangling data.. contd\n\nCombining various dataframes - Merging, Appending et al\n\n::: columns\n::: {.column width=\"48%\"}\nSAS\n\n```{r, eval=FALSE, echo=TRUE}\n#| code-line-numbers: \"|1,2,3,4|6,7,8,9,10,11\"\n# Append/Bind rows\ndata new_data ;\nset data_1 data_2 ; \nrun;\n\n# Join df to add columns\ndata new_data ;\nmerge data_1 (in= in_1) data_2 ; \nby id ;\nif in_1 ;\nrun;\n\n```\n:::\n\n::: {.column width=\"45%\"}\nR\n\n```{r, eval=FALSE, echo=TRUE}\n#| code-line-numbers: \"|1,2,3,4|6,7,8,9,10,11\"\n# Append/Bind rows\nnew_data <- bind_rows(data_1, \n                      data_2)\n\n\n\n# Join df to add columns\nnew_data <- left_join(data_1 , \n                      data_2 , \n                      by = \"id\"\n                      )\n\n```\n:::\n:::\n\n## Wrangling data.. contd\n\nMore to cover ?\n\n-   working with dates\n\n-   working with strings\n\n-   Plotting data\n\n## Automating the tasks\n\nSAS\n\n```{r, eval=FALSE, echo=TRUE}\n\n%macro add_variable(dataset_name); \n\ndata &dataset_name;\nset &dataset_name;\nnew_variable = 1; \nrun;\n\n%mend;\n\n%add_variable( my_data );\n```\n\nR\n\n```{r, eval=FALSE, echo=TRUE}\n\nadd_variable <- function(dataset_name){ \n  \n  dataset_name <- dataset_name %>%\n    mutate(new_variable = 1)\n  \nreturn( dataset_name ) \n}\n\nmy_data <- add_variable( my_data )\n```\n\n## Automating the tasks\n\n-   For simpler functions, helper functions like `across()` from tidyverse could also be used to perform an action across multiple columns without needing to use a loop.\n\n-   For nested functions, you could use `map` (or ancillary) family of functions from `{purrr}` pkg to get a more efficient form of for/while loops.\n\n# Thank You !! {background-color=\"#562457\"}\n"},"formats":{"rladies-revealjs":{"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":[],"highlight-style":"ayu","output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.2.335","auto-stretch":true,"logo":"_extensions/beatrizmilz/rladies/logo.png","footer":"[R-Ladies](https://rladies.org/) theme for [Quarto Presentations](https://quarto.org/docs/presentations/revealjs/index.html). Code available on [GitHub](https://github.com/beatrizmilz/quarto-rladies-theme).","theme":"_extensions/beatrizmilz/rladies/rladies.scss","slideNumber":"c/t","showSlideNumber":"all","title-slide-attributes":{"data-background-color":"#562457"},"previewLinks":true,"revealjs-plugins":[],"editor":"visual","title-block-banner":true,"title":"RLadies Philly & DC Lightning Talk","subtitle":"Data Wrangling In R For SAS users","code-block-border-left":true}}}}