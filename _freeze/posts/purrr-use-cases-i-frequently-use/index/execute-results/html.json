{
  "hash": "0a13a09d4ece37055e02110e4cad5739",
  "result": {
    "markdown": "---\ntitle: \"Functional Programming with Purrr\"\nauthor: \"Priyanka Gagneja\"\ndate: \"2023-09-08\"\ncategories: [R-Programming, examples, til, how-to]\nimage: \"\"\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n:::\n\n\nPlace to discuss several use cases where I could use\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Cache SAS outputs (saved in the same location as SAS output files)\npurrr::walk(.x = output_file_names,\n            .f = ~ write_csv_plus(haven::read_sas(paste0(sas_output_path, \"/\", .x, \".sas7bdat\")),\n                                  paste0(sas_output_path, \"/\", .x, \".csv\"))\n            )\n            \n## Cache SAS outputs (saved inside production/tests/testdata/fn/expected_output)\npurrr::walk(.x = output_file_names,\n            .f = ~ write_csv_plus(haven::read_sas(paste0(sas_output_path, \"/\", .x, \".sas7bdat\")),\n                                  paste0(tests_output_path, \"/\", .x, \".csv\"))\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\ndf1 <- data.frame(location = rep(c(\"Location A\", \"Location B\", \"Location C\"), 3),\n              value = rnorm(9), extra = \"yes\")\ndf2 <- data.frame(location = rep(c(\"Location A\", \"Location C\", \"Location D\"), 2),\n              value = rnorm(6), var = \"extra var\")\ndf3 <- data.frame(location = rep(c(\"Location B\", \"Location D\", \"Location E\"), 2),\n              number = rnorm(6))\n\ndfs <- list(df1, df2, df3)\n\n# So the spreadsheet would have a tab for location A that would read:\n# Row 1: value 1.37; extra yes; var NA; number NA\n# Row n: value -0.06; extra NA; var extra var; number NA\n# Then similar for Location B...\n# Seems simplish but I'm totally stuck. Any ideas?\n\n\n# ----\ndf_s <- dplyr::bind_rows(df1, df2, df3)\n\nfilter_loc <- function(df, loc_value) {\n    df %>% \n        dplyr::filter(location == paste(\"Location\", loc_value))\n}\n\npurrr::map(.x = c(\"A\", \"B\", \"C\", \"D\", \"E\"), .f = ~ df_s %>% filter_loc(.x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n    location      value extra       var number\n1 Location A  1.3709584   yes      <NA>     NA\n2 Location A  0.6328626   yes      <NA>     NA\n3 Location A  1.5115220   yes      <NA>     NA\n4 Location A -0.0627141  <NA> extra var     NA\n5 Location A -1.3888607  <NA> extra var     NA\n\n[[2]]\n    location       value extra  var     number\n1 Location B -0.56469817   yes <NA>         NA\n2 Location B  0.40426832   yes <NA>         NA\n3 Location B -0.09465904   yes <NA>         NA\n4 Location B          NA  <NA> <NA>  0.6359504\n5 Location B          NA  <NA> <NA> -2.4404669\n\n[[3]]\n    location      value extra       var number\n1 Location C  0.3631284   yes      <NA>     NA\n2 Location C -0.1061245   yes      <NA>     NA\n3 Location C  2.0184237   yes      <NA>     NA\n4 Location C  1.3048697  <NA> extra var     NA\n5 Location C -0.2787888  <NA> extra var     NA\n\n[[4]]\n    location      value extra       var     number\n1 Location D  2.2866454  <NA> extra var         NA\n2 Location D -0.1333213  <NA> extra var         NA\n3 Location D         NA  <NA>      <NA> -0.2842529\n4 Location D         NA  <NA>      <NA>  1.3201133\n\n[[5]]\n    location value extra  var     number\n1 Location E    NA  <NA> <NA> -2.6564554\n2 Location E    NA  <NA> <NA> -0.3066386\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Before:\n# emoticons_1 <- function(x) {\n#   if (x == \"happy\") {\n#     \":)\"\n#   } else if (x == \"sad\") {\n#     \":(\"\n#   } else {\n#     \"Feeling too complex for emoticons\"\n#   }\n# }\n# emoticons_list <- list(\n#   c(\"happy\", \":)\"),\n#   c(\"sad\", \":(\")\n# )\n# \n# emoticons_2 <- function(x, emoticons_list) {\n#   if (x == emoticons_list[[1]][1]) {\n#     return (emoticons_list[[1]][2])\n#   } else if (x == emoticons_list[[2]][1]) {\n#     return (emoticons_list[[2]][2])\n#   } else {\n#     return (\"Feeling too complex for emoticons\")\n#   }\n# }\n\n# After \ndf <- data.frame(\n  id = c(1:5),\n  mood = c(\"happy\", \"sad\", \"sad\", \"ecstatic\", \"ecstatic\") \n)\n\nemoticons_list <- list(\n  c(\"happy\", \":)\"),\n  c(\"sad\", \":(\"),\n  c(\"ecstatic\", \":D\")\n)\n\nemoticons_df <- data.frame(\n  emotion = c(\"happy\",\"sad\", \"ecstatic\"),\n  emoticon = c(\":)\", \":(\", \":D\")\n)\n\nget_emoticon <- function(df, selected_emotion) {\n  \n  result <- df %>% \n    filter(emotion == selected_emotion) %>% \n    pull(emoticon)\n  \n  return(result)\n}\n\ndf %>% \n  mutate(emoticon = purrr::map(.x = mood, \n                               .f = ~get_emoticon(emoticons_df, .x)\n                              )\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id     mood emoticon\n1  1    happy       :)\n2  2      sad       :(\n3  3      sad       :(\n4  4 ecstatic       :D\n5  5 ecstatic       :D\n```\n:::\n\n```{.r .cell-code}\ndf %>% \n  left_join(emoticons_df, by = c(\"mood\" = \"emotion\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id     mood emoticon\n1  1    happy       :)\n2  2      sad       :(\n3  3      sad       :(\n4  4 ecstatic       :D\n5  5 ecstatic       :D\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}